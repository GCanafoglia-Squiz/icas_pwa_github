{"version":3,"sources":["source/js/registerServiceWorker.js"],"names":["navigator","window","addEventListener","serviceWorker","register","then","registration","console","log","scope","err"],"mappings":";;AAAA,IAAA,mBAAAA,SAAA,EAAA;AACAC,SAAAC,gBAAA,CAAA,MAAA,EAAA,YAAA;AACAF,cAAAG,aAAA,CAAAC,QAAA,CAAA,QAAA,EAAAC,IAAA,CAAA,UAAAC,YAAA,EAAA;AACA;AACAC,cAAAC,GAAA,CAAA,oDAAA,EAAAF,aAAAG,KAAA;AACA,KAHA,EAGA,UAAAC,GAAA,EAAA;AACA;AACAH,cAAAC,GAAA,CAAA,qCAAA,EAAAE,GAAA;AACA,KANA;AAOA,GARA;AASA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"registerServiceWorker.js","sourcesContent":["if ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker.register('/sw.js').then(function(registration) {\n      // Registration was successful\n      console.log('ServiceWorker registration successful with scope: ', registration.scope);\n    }, function(err) {\n      // registration failed :(\n      console.log('ServiceWorker registration failed: ', err);\n    });\n  });\n}\n\n// Register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// const isLocalhost = () => Boolean(\n//     window.location.hostname === 'localhost' ||\n//     // [::1] is the IPv6 localhost address.\n//     window.location.hostname === '[::1]' ||\n//     // 127.0.0.1/8 is considered localhost for IPv4.\n//     window.location.hostname.match(\n//         /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n//     )\n// )\n//\n// function register (swUrl, hooks = {}) {\n//   const { registrationOptions = {}} = hooks\n//   delete hooks.registrationOptions\n//\n//   const emit = (hook, ...args) => {\n//     if (hooks && hooks[hook]) {\n//       hooks[hook](...args)\n//     }\n//   }\n//\n//   if ('serviceWorker' in navigator) {\n//     window.addEventListener('load', () => {\n//       if (isLocalhost()) {\n//         // This is running on localhost. Lets check if a service worker still exists or not.\n//         checkValidServiceWorker(swUrl, emit, registrationOptions)\n//         navigator.serviceWorker.ready.then(registration => {\n//           emit('ready', registration)\n//         })\n//       } else {\n//         // Is not local host. Just register service worker\n//         registerValidSW(swUrl, emit, registrationOptions)\n//       }\n//     })\n//   }\n// }\n//\n// function registerValidSW (swUrl, emit, registrationOptions) {\n//   navigator.serviceWorker\n//       .register(swUrl, registrationOptions)\n//       .then(registration => {\n//         emit('registered', registration)\n//         if (registration.waiting) {\n//           emit('updated', registration)\n//           return\n//         }\n//         registration.onupdatefound = () => {\n//           emit('updatefound', registration)\n//           const installingWorker = registration.installing\n//           installingWorker.onstatechange = () => {\n//             if (installingWorker.state === 'installed') {\n//               if (navigator.serviceWorker.controller) {\n//                 // At this point, the old content will have been purged and\n//                 // the fresh content will have been added to the cache.\n//                 // It's the perfect time to display a \"New content is\n//                 // available; please refresh.\" message in your web app.\n//                 emit('updated', registration)\n//               } else {\n//                 // At this point, everything has been precached.\n//                 // It's the perfect time to display a\n//                 // \"Content is cached for offline use.\" message.\n//                 emit('cached', registration)\n//               }\n//             }\n//           }\n//         }\n//       })\n//       .catch(error => {\n//         emit('error', error)\n//       })\n// }\n//\n// function checkValidServiceWorker (swUrl, emit, registrationOptions) {\n//   // Check if the service worker can be found.\n//   fetch(swUrl)\n//       .then(response => {\n//         // Ensure service worker exists, and that we really are getting a JS file.\n//         if (response.status === 404) {\n//           // No service worker found.\n//           emit('error', new Error(`Service worker not found at ${swUrl}`))\n//           unregister()\n//         } else if (response.headers.get('content-type').indexOf('javascript') === -1) {\n//           emit('error', new Error(\n//               `Expected ${swUrl} to have javascript content-type, ` +\n//               `but received ${response.headers.get('content-type')}`))\n//           unregister()\n//         } else {\n//           // Service worker found. Proceed as normal.\n//           registerValidSW(swUrl, emit, registrationOptions)\n//         }\n//       })\n//       .catch(error => {\n//         if (!navigator.onLine) {\n//           emit('offline')\n//         } else {\n//           emit('error', error)\n//         }\n//       })\n// }\n//\n// function unregister () {\n//   if ('serviceWorker' in navigator) {\n//     navigator.serviceWorker.ready.then(registration => {\n//       registration.unregister()\n//     })\n//   }\n// }\n//\n// register('/sw.js', {\n//   registrationOptions: { scope: './' },\n//   ready (registration) {\n//     console.log('Service worker is active.')\n//   },\n//   registered (registration) {\n//     console.log('Service worker has been registered.')\n//   },\n//   cached (registration) {\n//     console.log('Content has been cached for offline use.')\n//   },\n//   updatefound (registration) {\n//     console.log('New content is downloading.')\n//   },\n//   updated (registration) {\n//     console.log('New content is available; please refresh.')\n//   },\n//   offline () {\n//     console.log('No internet connection found. App is running in offline mode.')\n//   },\n//   error (error) {\n//     console.error('Error during service worker registration:', error)\n//   }\n// });"]}