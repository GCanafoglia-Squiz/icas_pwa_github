{"version":3,"sources":["source/js/registerServiceWorker.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","register","swUrl","hooks","registrationOptions","emit","hook","args","navigator","addEventListener","checkValidServiceWorker","serviceWorker","ready","then","registration","registerValidSW","waiting","onupdatefound","installingWorker","installing","onstatechange","state","controller","catch","error","fetch","response","status","Error","unregister","headers","get","indexOf","onLine","scope","console","log","registered","cached","updatefound","updated","offline"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA,IAAAA,cAAA,SAAAA,WAAA;AAAA,SAAAC,QACAC,OAAAC,QAAA,CAAAC,QAAA,KAAA,WAAA;AACA;AACAF,SAAAC,QAAA,CAAAC,QAAA,KAAA,OAFA;AAGA;AACAF,SAAAC,QAAA,CAAAC,QAAA,CAAAC,KAAA,CACA,wDADA,CALA,CAAA;AAAA,CAAA;;AAUA,SAAAC,QAAA,CAAAC,KAAA,EAAA;AAAA,MAAAC,KAAA,uEAAA,EAAA;AAAA,8BACAA,KADA,CACAC,mBADA;AAAA,MACAA,mBADA,yCACA,EADA;;AAEA,SAAAD,MAAAC,mBAAA;;AAEA,MAAAC,OAAA,SAAAA,IAAA,CAAAC,IAAA,EAAA;AAAA,sCAAAC,IAAA;AAAAA,UAAA;AAAA;;AACA,QAAAJ,SAAAA,MAAAG,IAAA,CAAA,EAAA;AACAH,YAAAG,IAAA,eAAAC,IAAA;AACA;AACA,GAJA;;AAMA,MAAA,mBAAAC,SAAA,EAAA;AACAX,WAAAY,gBAAA,CAAA,MAAA,EAAA,YAAA;AACA,UAAAd,aAAA,EAAA;AACA;AACAe,gCAAAR,KAAA,EAAAG,IAAA,EAAAD,mBAAA;AACAI,kBAAAG,aAAA,CAAAC,KAAA,CAAAC,IAAA,CAAA,wBAAA;AACAR,eAAA,OAAA,EAAAS,YAAA;AACA,SAFA;AAGA,OANA,MAMA;AACA;AACAC,wBAAAb,KAAA,EAAAG,IAAA,EAAAD,mBAAA;AACA;AACA,KAXA;AAYA;AACA;;AAEA,SAAAW,eAAA,CAAAb,KAAA,EAAAG,IAAA,EAAAD,mBAAA,EAAA;AACAI,YAAAG,aAAA,CACAV,QADA,CACAC,KADA,EACAE,mBADA,EAEAS,IAFA,CAEA,wBAAA;AACAR,SAAA,YAAA,EAAAS,YAAA;AACA,QAAAA,aAAAE,OAAA,EAAA;AACAX,WAAA,SAAA,EAAAS,YAAA;AACA;AACA;AACAA,iBAAAG,aAAA,GAAA,YAAA;AACAZ,WAAA,aAAA,EAAAS,YAAA;AACA,UAAAI,mBAAAJ,aAAAK,UAAA;AACAD,uBAAAE,aAAA,GAAA,YAAA;AACA,YAAAF,iBAAAG,KAAA,KAAA,WAAA,EAAA;AACA,cAAAb,UAAAG,aAAA,CAAAW,UAAA,EAAA;AACA;AACA;AACA;AACA;AACAjB,iBAAA,SAAA,EAAAS,YAAA;AACA,WANA,MAMA;AACA;AACA;AACA;AACAT,iBAAA,QAAA,EAAAS,YAAA;AACA;AACA;AACA,OAfA;AAgBA,KAnBA;AAoBA,GA5BA,EA6BAS,KA7BA,CA6BA,iBAAA;AACAlB,SAAA,OAAA,EAAAmB,KAAA;AACA,GA/BA;AAgCA;;AAEA,SAAAd,uBAAA,CAAAR,KAAA,EAAAG,IAAA,EAAAD,mBAAA,EAAA;AACA;AACAqB,QAAAvB,KAAA,EACAW,IADA,CACA,oBAAA;AACA;AACA,QAAAa,SAAAC,MAAA,KAAA,GAAA,EAAA;AACA;AACAtB,WAAA,OAAA,EAAA,IAAAuB,KAAA,kCAAA1B,KAAA,CAAA;AACA2B;AACA,KAJA,MAIA,IAAAH,SAAAI,OAAA,CAAAC,GAAA,CAAA,cAAA,EAAAC,OAAA,CAAA,YAAA,MAAA,CAAA,CAAA,EAAA;AACA3B,WAAA,OAAA,EAAA,IAAAuB,KAAA,CACA,cAAA1B,KAAA,6DACAwB,SAAAI,OAAA,CAAAC,GAAA,CAAA,cAAA,CADA,CADA,CAAA;AAGAF;AACA,KALA,MAKA;AACA;AACAd,sBAAAb,KAAA,EAAAG,IAAA,EAAAD,mBAAA;AACA;AACA,GAhBA,EAiBAmB,KAjBA,CAiBA,iBAAA;AACA,QAAA,CAAAf,UAAAyB,MAAA,EAAA;AACA5B,WAAA,SAAA;AACA,KAFA,MAEA;AACAA,WAAA,OAAA,EAAAmB,KAAA;AACA;AACA,GAvBA;AAwBA;;AAEA,SAAAK,UAAA,GAAA;AACA,MAAA,mBAAArB,SAAA,EAAA;AACAA,cAAAG,aAAA,CAAAC,KAAA,CAAAC,IAAA,CAAA,wBAAA;AACAC,mBAAAe,UAAA;AACA,KAFA;AAGA;AACA;;AAEA5B,SAAA,QAAA,EAAA;AACAG,uBAAA,EAAA8B,OAAA,IAAA,EADA;AAEAtB,OAFA,iBAEAE,YAFA,EAEA;AACAqB,YAAAC,GAAA,CAAA,2BAAA;AACA,GAJA;AAKAC,YALA,sBAKAvB,YALA,EAKA;AACAqB,YAAAC,GAAA,CAAA,qCAAA;AACA,GAPA;AAQAE,QARA,kBAQAxB,YARA,EAQA;AACAqB,YAAAC,GAAA,CAAA,0CAAA;AACA,GAVA;AAWAG,aAXA,uBAWAzB,YAXA,EAWA;AACAqB,YAAAC,GAAA,CAAA,6BAAA;AACA,GAbA;AAcAI,SAdA,mBAcA1B,YAdA,EAcA;AACAqB,YAAAC,GAAA,CAAA,2CAAA;AACA,GAhBA;AAiBAK,SAjBA,qBAiBA;AACAN,YAAAC,GAAA,CAAA,+DAAA;AACA,GAnBA;AAoBAZ,OApBA,iBAoBAA,MApBA,EAoBA;AACAW,YAAAX,KAAA,CAAA,2CAAA,EAAAA,MAAA;AACA;AAtBA,CAAA","file":"registerServiceWorker.js","sourcesContent":["// if ('serviceWorker' in navigator) {\n//   window.addEventListener('load', () => {\n//     navigator.serviceWorker.register('/sw.js')\n//         .then((registration) => {\n//           console.log(registration);\n//           firebase.messaging().useServiceWorker(registration);\n//         })\n//         .catch(err => console.log('SW error!', err));\n//   });\n// }\n// Register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\nconst isLocalhost = () => Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nfunction register (swUrl, hooks = {}) {\n  const { registrationOptions = {}} = hooks\n  delete hooks.registrationOptions\n\n  const emit = (hook, ...args) => {\n    if (hooks && hooks[hook]) {\n      hooks[hook](...args)\n    }\n  }\n\n  if ('serviceWorker' in navigator) {\n    window.addEventListener('load', () => {\n      if (isLocalhost()) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, emit, registrationOptions)\n        navigator.serviceWorker.ready.then(registration => {\n          emit('ready', registration)\n        })\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, emit, registrationOptions)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, emit, registrationOptions) {\n  navigator.serviceWorker\n      .register(swUrl, registrationOptions)\n      .then(registration => {\n        emit('registered', registration)\n        if (registration.waiting) {\n          emit('updated', registration)\n          return\n        }\n        registration.onupdatefound = () => {\n          emit('updatefound', registration)\n          const installingWorker = registration.installing\n          installingWorker.onstatechange = () => {\n            if (installingWorker.state === 'installed') {\n              if (navigator.serviceWorker.controller) {\n                // At this point, the old content will have been purged and\n                // the fresh content will have been added to the cache.\n                // It's the perfect time to display a \"New content is\n                // available; please refresh.\" message in your web app.\n                emit('updated', registration)\n              } else {\n                // At this point, everything has been precached.\n                // It's the perfect time to display a\n                // \"Content is cached for offline use.\" message.\n                emit('cached', registration)\n              }\n            }\n          }\n        }\n      })\n      .catch(error => {\n        emit('error', error)\n      })\n}\n\nfunction checkValidServiceWorker (swUrl, emit, registrationOptions) {\n  // Check if the service worker can be found.\n  fetch(swUrl)\n      .then(response => {\n        // Ensure service worker exists, and that we really are getting a JS file.\n        if (response.status === 404) {\n          // No service worker found.\n          emit('error', new Error(`Service worker not found at ${swUrl}`))\n          unregister()\n        } else if (response.headers.get('content-type').indexOf('javascript') === -1) {\n          emit('error', new Error(\n              `Expected ${swUrl} to have javascript content-type, ` +\n              `but received ${response.headers.get('content-type')}`))\n          unregister()\n        } else {\n          // Service worker found. Proceed as normal.\n          registerValidSW(swUrl, emit, registrationOptions)\n        }\n      })\n      .catch(error => {\n        if (!navigator.onLine) {\n          emit('offline')\n        } else {\n          emit('error', error)\n        }\n      })\n}\n\nfunction unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n\nregister('/sw.js', {\n  registrationOptions: { scope: './' },\n  ready (registration) {\n    console.log('Service worker is active.')\n  },\n  registered (registration) {\n    console.log('Service worker has been registered.')\n  },\n  cached (registration) {\n    console.log('Content has been cached for offline use.')\n  },\n  updatefound (registration) {\n    console.log('New content is downloading.')\n  },\n  updated (registration) {\n    console.log('New content is available; please refresh.')\n  },\n  offline () {\n    console.log('No internet connection found. App is running in offline mode.')\n  },\n  error (error) {\n    console.error('Error during service worker registration:', error)\n  }\n});"]}